<?php

/**
 * @file
 * Section Library module file.
 */

use Drupal\Core\Url;
use Drupal\Component\Serialization\Json;

/**
 * Implements hook_element_info_alter().
 */
function section_library_element_info_alter(array &$types) {
  // $types['layout_builder']['#pre_render'] = [
  //   [\Drupal\section_library\Element\LayoutBuilder::class, 'preRenderSectionLibrary'],
  // ];
  $types['layout_builder']['#pre_render'][] = '_section_library_layout_builder_pre_render';
}

/**
 * Prerender Callback Function.
 */
function _section_library_layout_builder_pre_render($element) {
  if (isset($element['layout_builder'])) {
    $sections = $element['layout_builder'];
    foreach ($sections as $key => $section) {
      // Filter the sections.
      if (!is_numeric($key)) {
        continue;
      }

      // New sections.
      if (isset($section['link']) && isset($section['link']['#url'])) {
        $params = $section['link']['#url']->getRouteParameters();
        $url_options = [
          'attributes' => [
            'class' => [
              'use-ajax',
              'layout-builder__link',
              'layout-builder__link--add',
            ],
            'data-dialog-type' => 'dialog',
            'data-dialog-renderer' => 'off_canvas',
          ],
        ];

        // Optional showing the library on Layout Builder Modal.
        $moduleHandler = \Drupal::service('module_handler');
        if ($moduleHandler->moduleExists('layout_builder_modal')) {
          $config = \Drupal::config('layout_builder_modal.settings');

          $data_dialog_options = Json::encode([
            'width' => $config->get('modal_width'),
            'height' => $config->get('modal_height'),
            'target' => 'layout-builder-modal',
            'autoResize' => $config->get('modal_autoresize'),
            'modal' => TRUE,
          ]);

          $url_options['attributes']['data-dialog-options'] = $data_dialog_options;
          unset($url_options['attributes']['data-dialog-renderer']);
        }

        $sections[$key]['choose_section_from_library'] = [
          '#type' => 'link',
          '#title' => t('Import section from Library'),
          '#url' => Url::fromRoute(
            'section_library.choose_section_from_library',
            [
              'section_storage_type' => $params['section_storage_type'],
              'section_storage' => $params['section_storage'],
              'delta' => $params['delta'],
            ],
            $url_options,
          ),
        ];
      }
      // Configure section.
      elseif (isset($section['configure']) && isset($section['configure']['#url'])) {
        $params = $section['configure']['#url']->getRouteParameters();
        // Pop the last item to add the link before it.
        $last_item_section = array_pop($sections[$key]);
        $sections[$key]['add_to_library'] = [
          '#type' => 'link',
          '#title' => t('Add to Library'),
          '#url' => Url::fromRoute(
            'section_library.add_section_to_library',
            [
              'section_storage_type' => $params['section_storage_type'],
              'section_storage' => $params['section_storage'],
              'delta' => $params['delta'],
            ],
            [
              'attributes' => [
                'class' => [
                  'use-ajax',
                  'layout-builder__link',
                  'layout-builder__link--add',
                ],
                'data-dialog-type' => 'dialog',
                'data-dialog-renderer' => 'off_canvas',
              ],
            ]
          ),
        ];
        // Push the last item again.
        array_push($sections[$key], $last_item_section);
      }
    }

    $element['layout_builder'] = $sections;

    $element['#attached']['library'][] = 'section_library/section_library';
  }

  return $element;
}
